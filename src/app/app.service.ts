import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Filter } from './shared/models/filter.model';

@Injectable({
  providedIn: 'root'
})
export class AppService {

  apiEndpoint = 'https://private-cc77e-aff.apiary-mock.com/posts';

  // Filters are currently hard coded but could be generated by looking at data coming back from api
  // and getting the unique service names from the data
  // However, I've chosen to hard code the filters instead of basing them on data returned from api
  // as paginated data could mean an incomplete list of filters is generated
  defaultFilters = [
    new Filter({ name: 'Manual', enabled: true }),
    new Filter({ name: 'Instagram', enabled: true }),
    new Filter({ name: 'Twitter', enabled: true })
  ];

  placeholderImageSRC = 'http://lorempixel.com/400/200/fashion/';


  constructor(
    private httpClient: HttpClient
  ) {
    // If placeholderImagesTurnedOn isn't stored in local storage, store it
    if (localStorage.getItem('placeholderImagesTurnedOn') === null) {
      localStorage.setItem('placeholderImagesTurnedOn', JSON.stringify(true));
    }

    // If filters aren't stored in local storage, store them
    if (localStorage.getItem('filters') === null) {
      localStorage.setItem('filters', JSON.stringify(this.defaultFilters));
    }
  }


  getData(limit, offset): Observable<any> {
    return this.httpClient
    .get(this.apiEndpoint + '?limit=' + limit + '&offset=' + offset);
  }


  getPostFilters() {
    return JSON.parse(localStorage.getItem('filters'));
  }


  verifyImageURL(url, callBack) {
    const img = new Image();
    img.src = url;

    img.onload = () => {
      callBack(true);
    };

    img.onerror = () => {
      callBack(false);
    };
  }


  replaceWithPlaceholderImage(): string | null {
    if (JSON.parse(localStorage.getItem('placeholderImagesTurnedOn'))) {
      // Replace with a placeholder image to prevent broken image links
      const randomID = Math.floor(Math.random() * 10) + 1;
      return this.placeholderImageSRC + randomID;

    } else {
      // Remove broken image link entirely
      return null;
    }
  }


  decodeHTMLEntities(text) {
    // Replace encoded characters
    text = text.replace('&gt;', '>');
    text = text.replace('&amp;', '&');

    return text;
  }
}
